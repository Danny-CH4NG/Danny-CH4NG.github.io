{"title":"Golang-Gin框架-GORM搭建APIServer-3","uid":"8b84f4b495ddc0e37d7c4996da47c833","slug":"Golang-Gin框架-GORM搭建APIServer-3","date":"2022-01-05T14:26:50.000Z","updated":"2022-01-05T14:27:52.526Z","comments":true,"path":"api/articles/Golang-Gin框架-GORM搭建APIServer-3.json","keywords":null,"cover":null,"content":"<h1 id=\"Golang-Gin框架-GORM-搭建API-Server-3\"><a href=\"#Golang-Gin框架-GORM-搭建API-Server-3\" class=\"headerlink\" title=\"[Golang] Gin框架+GORM 搭建API Server(3)\"></a>[Golang] Gin框架+GORM 搭建API Server(3)</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>上一節完成了基本的路由註冊功能，本節將完成對資料庫的連線部分。<br>根據第一節，建立了</p>\n<ul>\n<li>device_infos</li>\n<li>device_states</li>\n<li>device_actives</li>\n</ul>\n<p>而三支API分別為</p>\n<ul>\n<li>&#x2F;api&#x2F;v1&#x2F;actives&#x2F;:active：<ul>\n<li>SELECT device_actives WHERE active&#x3D;? JOIN device_infos </li>\n<li>SELECT actives WHERE active&#x3D;?</li>\n</ul>\n</li>\n<li>&#x2F;api&#x2F;v1&#x2F;actives&#x2F;:device_id：<ul>\n<li>UPDATE device_actives SET active&#x3D;1 WHERE device_id&#x3D;?</li>\n</ul>\n</li>\n<li>&#x2F;api&#x2F;v1&#x2F;states&#x2F;:state：<ul>\n<li>SELECT device_states WHERE state&#x3D;? JOIN device_infos</li>\n</ul>\n</li>\n</ul>\n<p>將完成資料庫select、update、join等操作</p>\n<h2 id=\"本節目標\"><a href=\"#本節目標\" class=\"headerlink\" title=\"本節目標\"></a>本節目標</h2><ul>\n<li>建立actives的view結合device_infos與device_actives，避免每次查詢重覆join</li>\n<li>建立GORM Model架構</li>\n<li>完成API與GORM對接</li>\n</ul>\n<h3 id=\"基本目錄結構\"><a href=\"#基本目錄結構\" class=\"headerlink\" title=\"基本目錄結構\"></a>基本目錄結構</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">server&#x2F;\n├── config &#x2F;&#x2F; 配置讀取yaml設定\n│   └── config.go &#x2F;&#x2F; 讀取yml設定\n├── middleware &#x2F;&#x2F; 中間件\n├── models &#x2F;&#x2F; 放置gorm的數據庫模型\n│   ├── actives.go &#x2F;&#x2F; 對應actives檢視表\n│   ├── device_actives.go &#x2F;&#x2F; 對應device_actives資料表\n│   ├── device_infos.go &#x2F;&#x2F; 對應device_infos資料表\n│   ├── device_states.go &#x2F;&#x2F; 對應device_states資料表\n│   └── models.go &#x2F;&#x2F; model init\n├── routers &#x2F;&#x2F; 路由邏輯\n│   ├── api\n│   │   └── v1\n│   │       ├── actives.go &#x2F;&#x2F; actives相關api\n│   │       └── states.go &#x2F;&#x2F; states相關api\n│   └── router.go &#x2F;&#x2F; 路由邏輯\n├── config.yml &#x2F;&#x2F; 設定檔\n└── server.go &#x2F;&#x2F; 入口<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"PostgreSQL建立檢視表\"><a href=\"#PostgreSQL建立檢視表\" class=\"headerlink\" title=\"PostgreSQL建立檢視表\"></a>PostgreSQL建立檢視表</h2><p>避免查詢多次JOIN浪費效能，並可以讓整體架構更清晰</p>\n<h3 id=\"actives\"><a href=\"#actives\" class=\"headerlink\" title=\"actives\"></a>actives</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">CREATE OR REPLACE VIEW public.actives\n AS\n SELECT device_actives.device_id,\n    device_infos.type,\n    device_infos.address,\n    device_actives.active\n   FROM device_infos,\n    device_actives\n  WHERE device_infos.device_id::text &#x3D; device_actives.device_id::text;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"建立資料\"><a href=\"#建立資料\" class=\"headerlink\" title=\"建立資料\"></a>建立資料</h3><p>在device_actives表與devices_infos表建立對應資料，查看actives表是否如預期顯示</p>\n<h4 id=\"device-actives\"><a href=\"#device-actives\" class=\"headerlink\" title=\"device_actives\"></a>device_actives</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">INSERT INTO public.device_actives(\n\tdevice_id, active)\n\tVALUES (&#39;test001&#39;, 0);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"devices-infos\"><a href=\"#devices-infos\" class=\"headerlink\" title=\"devices_infos\"></a>devices_infos</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">INSERT INTO public.device_infos(\n\tdevice_id, type, address)\n\tVALUES (&#39;test001&#39;, &#39;test&#39;, &#39;測試地址&#39;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"devices-states\"><a href=\"#devices-states\" class=\"headerlink\" title=\"devices_states\"></a>devices_states</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">INSERT INTO public.device_states(\n\tdevice_id, state, update_time)\n\tVALUES (&#39;test001&#39;, 1, &#39;2021-10-19 05:49:25&#39;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"建立GORM連線\"><a href=\"#建立GORM連線\" class=\"headerlink\" title=\"建立GORM連線\"></a>建立GORM連線</h2><h3 id=\"models-go\"><a href=\"#models-go\" class=\"headerlink\" title=\"models.go\"></a>models.go</h3><p>建立db的連線，由config獲取連線資訊</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">package models\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;server&#x2F;config&quot;\n\n\t&quot;github.com&#x2F;rs&#x2F;zerolog&#x2F;log&quot;\n\n\t&quot;gorm.io&#x2F;driver&#x2F;postgres&quot;\n\t&quot;gorm.io&#x2F;gorm&quot;\n)\n\n&#x2F;&#x2F; db實例\nvar db *gorm.DB\n\nfunc init() &#123;\n\tdsn :&#x3D; fmt.Sprintf(\n\t\t&quot;host&#x3D;%s port&#x3D;%s user&#x3D;%s password&#x3D;%s dbname&#x3D;%s sslmode&#x3D;disable&quot;,\n\t\tconfig.Config.Pgsql.IP,\n\t\tconfig.Config.Pgsql.Port,\n\t\tconfig.Config.Pgsql.User,\n\t\tconfig.Config.Pgsql.Password,\n\t\tconfig.Config.Pgsql.Database,\n\t)\n\n\tvar err error\n\n\t&#x2F;&#x2F; 嘗試連線PostgreSQL\n\t&#x2F;&#x2F; 注意：這裡不要用:&#x3D;，會改變db記憶體位置，db成為nil且不會報錯直到調用\n\tdb, err &#x3D; gorm.Open(postgres.Open(dsn), &amp;gorm.Config&#123;&#125;)\n\tif err !&#x3D; nil &#123;\n\t\tlog.Error().Err(err).Msg(&quot;無法建立PostgreSQL連線&quot;)\n\t&#125; else &#123;\n\t\tlog.Info().Msg(&quot;成功建立PostgreSQL連線&quot;)\n\t&#125;\n\n\tsqlDB, err :&#x3D; db.DB()\n\tsqlDB.SetMaxIdleConns(10)  &#x2F;&#x2F; 設定最高空閒連接數\n\tsqlDB.SetMaxOpenConns(100) &#x2F;&#x2F; 設定最高併發數\n&#125;\n\n&#x2F;&#x2F; 關閉DB(不可寫在init，init階段結束會直接觸發)\nfunc CloseDB() &#123;\n\tsqlDB, _ :&#x3D; db.DB()\n\tdefer sqlDB.Close()\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"設備狀態請求與獲取資料\"><a href=\"#設備狀態請求與獲取資料\" class=\"headerlink\" title=\"設備狀態請求與獲取資料\"></a>設備狀態請求與獲取資料</h2><h3 id=\"models-x2F-actives-go\"><a href=\"#models-x2F-actives-go\" class=\"headerlink\" title=\"models&#x2F;actives.go\"></a>models&#x2F;actives.go</h3><p>將表的欄位以struct進行對應，並填寫輸出成json的樣式</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">package models\n\n&#x2F;&#x2F; actives表的模型\ntype Actives struct &#123;\n\tDeviceId string &#96;json:&quot;deviceId&quot;&#96;\n\tType     string &#96;json:&quot;type&quot;&#96;\n\tAddress  string &#96;json:&quot;address&quot;&#96;\n\tActive   int    &#96;json:&quot;active&quot;&#96;\n&#125;\n\n&#x2F;&#x2F; 取得符合Actives條件的row\nfunc GetActives(maps interface&#123;&#125;) (res []Actives) &#123;\n\ta, ok :&#x3D; maps.(map[string]interface&#123;&#125;) &#x2F;&#x2F; 型別斷言為map\n\tif ok &amp;&amp; a[&quot;active&quot;] &#x3D;&#x3D; 99 &#123;           &#x2F;&#x2F; 如果請求值為99，則為全選\n\t\tdb.Find(&amp;res)\n\t&#125; else &#123;\n\t\tdb.Where(maps).Find(&amp;res)\n\t&#125;\n\treturn\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"routes-x2F-v1-x2F-actives-go\"><a href=\"#routes-x2F-v1-x2F-actives-go\" class=\"headerlink\" title=\"routes&#x2F;v1&#x2F;actives.go\"></a>routes&#x2F;v1&#x2F;actives.go</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">package v1\n\nimport (\n\t&quot;net&#x2F;http&quot;\n\t&quot;strconv&quot;\n\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n\t&quot;github.com&#x2F;rs&#x2F;zerolog&#x2F;log&quot;\n\n\t&quot;server&#x2F;models&quot;\n)\n\n&#x2F;&#x2F; 獲取已排除、未排除or全部的設備狀態\nfunc GetActives(c *gin.Context) &#123;\n\tactive :&#x3D; c.Param(&quot;active&quot;) &#x2F;&#x2F; 取得active值\n\n\treq :&#x3D; make(map[string]interface&#123;&#125;) &#x2F;&#x2F; 傳遞給GORM的參數\n\tres :&#x3D; make(map[string]interface&#123;&#125;) &#x2F;&#x2F; 準備回傳給前端的映射\n\n\tif active !&#x3D; &quot;&quot; &#123;\n\t\ti, err :&#x3D; strconv.Atoi(active) &#x2F;&#x2F; 字串轉數字\n\t\tif err !&#x3D; nil &#123;\n\t\t\tlog.Error().Err(err).Msg(&quot;字串轉數字錯誤&quot;)\n\t\t&#125;\n\t\treq[&quot;active&quot;] &#x3D; i\n\t&#125;\n\n\tres[&quot;data&quot;] &#x3D; models.GetActives(req)\n\tres[&quot;code&quot;] &#x3D; &quot;success&quot;\n\tc.JSON(http.StatusOK, res)\n&#125;\n\n&#x2F;&#x2F; 修改設備活躍狀態\nfunc EditActive(c *gin.Context) &#123;\n\tlog.Log().Msg(&quot;EditActive&quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"測試\"><a href=\"#測試\" class=\"headerlink\" title=\"測試\"></a>測試</h3><p>Postman GET<br><a href=\"http://localhost:10080/api/v1/actives/0\">http://localhost:10080/api/v1/actives/0</a><br>檢查是否回傳預想中的值，完成第一支API連線</p>\n<h2 id=\"修改設備活躍狀態\"><a href=\"#修改設備活躍狀態\" class=\"headerlink\" title=\"修改設備活躍狀態\"></a>修改設備活躍狀態</h2><h3 id=\"models-x2F-device-actives-go\"><a href=\"#models-x2F-device-actives-go\" class=\"headerlink\" title=\"models&#x2F;device_actives.go\"></a>models&#x2F;device_actives.go</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">package models\n\ntype DeviceActives struct &#123;\n\tDeviceId string &#96;json:&quot;deviceId&quot; gorm:&quot;column:device_id&quot;&#96;\n\tActive   int    &#96;json:&quot;active&quot;&#96;\n&#125;\n\n&#x2F;&#x2F; 依據device_id toogle active欄位\nfunc UpdateDeviceActives(maps interface&#123;&#125;) (deviceActives DeviceActives) &#123;\n\tdb.Where(maps).First(&amp;deviceActives)\n\tif deviceActives.Active &#x3D;&#x3D; 0 &#123;\n\t\tdb.Model(&amp;DeviceActives&#123;&#125;).Where(maps).Update(&quot;active&quot;, 1)\n\t&#125; else if deviceActives.Active &#x3D;&#x3D; 1 &#123;\n\t\tdb.Model(&amp;DeviceActives&#123;&#125;).Where(maps).Update(&quot;active&quot;, 0)\n\t&#125;\n\treturn\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"routes-x2F-v1-x2F-actives-go-1\"><a href=\"#routes-x2F-v1-x2F-actives-go-1\" class=\"headerlink\" title=\"routes&#x2F;v1&#x2F;actives.go\"></a>routes&#x2F;v1&#x2F;actives.go</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">package v1\n\nimport (\n\t&quot;net&#x2F;http&quot;\n\t&quot;strconv&quot;\n\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n\t&quot;github.com&#x2F;rs&#x2F;zerolog&#x2F;log&quot;\n\n\t&quot;server&#x2F;models&quot;\n)\n\n&#x2F;&#x2F; 獲取已排除、未排除or全部的設備狀態\nfunc GetActives(c *gin.Context) &#123;\n\tactive :&#x3D; c.Param(&quot;active&quot;) &#x2F;&#x2F; 取得active值\n\n\treq :&#x3D; make(map[string]interface&#123;&#125;) &#x2F;&#x2F; 傳遞給GORM的參數\n\tres :&#x3D; make(map[string]interface&#123;&#125;) &#x2F;&#x2F; 準備回傳給前端的映射\n\n\tif active !&#x3D; &quot;&quot; &#123;\n\t\ti, err :&#x3D; strconv.Atoi(active) &#x2F;&#x2F; 字串轉數字\n\t\tif err !&#x3D; nil &#123;\n\t\t\tlog.Error().Err(err).Msg(&quot;字串轉數字錯誤&quot;)\n\t\t&#125;\n\t\treq[&quot;active&quot;] &#x3D; i\n\t&#125;\n\n\tres[&quot;data&quot;] &#x3D; models.GetActives(req)\n\tres[&quot;code&quot;] &#x3D; &quot;success&quot;\n\tc.JSON(http.StatusOK, res)\n&#125;\n\n&#x2F;&#x2F; 修改設備活躍狀態\nfunc EditActive(c *gin.Context) &#123;\n\tdeviceId :&#x3D; c.Param(&quot;device_id&quot;) &#x2F;&#x2F; 取得device_id值\n\n\treq :&#x3D; make(map[string]interface&#123;&#125;) &#x2F;&#x2F; 傳遞給GORM的參數\n\tres :&#x3D; make(map[string]interface&#123;&#125;) &#x2F;&#x2F; 準備回傳給前端的映射\n\n\tif deviceId !&#x3D; &quot;&quot; &#123;\n\t\treq[&quot;device_id&quot;] &#x3D; deviceId\n\t&#125;\n\n\tmodels.UpdateDeviceActives(req)                                      &#x2F;&#x2F; toogle所選擇設備\n\tres[&quot;data&quot;] &#x3D; models.GetActives(map[string]interface&#123;&#125;&#123;&quot;active&quot;: 1&#125;) &#x2F;&#x2F; 取得新的已排除設備列表\n\tres[&quot;code&quot;] &#x3D; &quot;success&quot;\n\tc.JSON(http.StatusOK, res)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"測試-1\"><a href=\"#測試-1\" class=\"headerlink\" title=\"測試\"></a>測試</h3><p>Postman PUT<br><a href=\"http://localhost:10080/api/v1/actives/test001\">http://localhost:10080/api/v1/actives/test001</a><br>檢查是否回傳預想中的值</p>\n<h2 id=\"獲取「異常但未被排除」設備狀態\"><a href=\"#獲取「異常但未被排除」設備狀態\" class=\"headerlink\" title=\"獲取「異常但未被排除」設備狀態\"></a>獲取「異常但未被排除」設備狀態</h2><h3 id=\"models-x2F-device-states-go\"><a href=\"#models-x2F-device-states-go\" class=\"headerlink\" title=\"models&#x2F;device_states.go\"></a>models&#x2F;device_states.go</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">package models\n\nimport &quot;time&quot;\n\ntype DeviceStates struct &#123;\n\tID         int       &#96;json:&quot;id&quot;&#96;\n\tDeviceId   string    &#96;json:&quot;device_id&quot;&#96;\n\tState      int       &#96;json:&quot;state&quot;&#96;\n\tUpdateTime time.Time &#96;json:&quot;update_time&quot;&#96;\n&#125;\n\ntype GetDeviceStatesResult struct &#123;\n\tActives\n\tState      int       &#96;json:&quot;state&quot;&#96;\n\tUpdateTime time.Time &#96;json:&quot;update_time&quot;&#96;\n&#125;\n\n&#x2F;&#x2F; 取得符合State條件的row，並JOIN device_info\nfunc GetDeviceStates(maps interface&#123;&#125;) (res []GetDeviceStatesResult) &#123;\n\ta, ok :&#x3D; maps.(map[string]interface&#123;&#125;) &#x2F;&#x2F; 型別斷言為map\n\tif ok &amp;&amp; a[&quot;state&quot;] &#x3D;&#x3D; 99 &#123;            &#x2F;&#x2F; 如果請求值為99，則為全選\n\t\tdb.\n\t\t\tModel(&amp;DeviceStates&#123;&#125;).\n\t\t\tSelect(&quot;*&quot;).\n\t\t\tJoins(&quot;left join actives on actives.device_id &#x3D; device_states.device_id&quot;).\n\t\t\tScan(&amp;res)\n\t&#125; else &#123;\n\t\tdb.\n\t\t\tModel(&amp;DeviceStates&#123;&#125;).\n\t\t\tSelect(&quot;*&quot;).\n\t\t\tJoins(&quot;left join actives on actives.device_id &#x3D; device_states.device_id&quot;).\n\t\t\tWhere(maps).\n\t\t\tScan(&amp;res)\n\t&#125;\n\treturn\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"routes-x2F-v1-x2F-states-go\"><a href=\"#routes-x2F-v1-x2F-states-go\" class=\"headerlink\" title=\"routes&#x2F;v1&#x2F;states.go\"></a>routes&#x2F;v1&#x2F;states.go</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">package v1\n\nimport (\n\t&quot;net&#x2F;http&quot;\n\t&quot;server&#x2F;models&quot;\n\t&quot;strconv&quot;\n\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n\t&quot;github.com&#x2F;rs&#x2F;zerolog&#x2F;log&quot;\n)\n\n&#x2F;&#x2F; 獲取「異常但未被排除」設備狀態\nfunc GetStates(c *gin.Context) &#123;\n\tstate :&#x3D; c.Param(&quot;state&quot;) &#x2F;&#x2F; 取得active值\n\n\treq :&#x3D; make(map[string]interface&#123;&#125;) &#x2F;&#x2F; 傳遞給GORM的參數\n\tres :&#x3D; make(map[string]interface&#123;&#125;) &#x2F;&#x2F; 準備回傳給前端的映射\n\n\tif state !&#x3D; &quot;&quot; &#123;\n\t\ti, err :&#x3D; strconv.Atoi(state) &#x2F;&#x2F; 字串轉數字\n\t\tif err !&#x3D; nil &#123;\n\t\t\tlog.Error().Err(err).Msg(&quot;字串轉數字錯誤&quot;)\n\t\t&#125;\n\t\treq[&quot;state&quot;] &#x3D; i\n\t&#125;\n\treq[&quot;active&quot;] &#x3D; 0\n\n\tres[&quot;data&quot;] &#x3D; models.GetDeviceStates(req)\n\tres[&quot;code&quot;] &#x3D; &quot;success&quot;\n\tc.JSON(http.StatusOK, res)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"測試-2\"><a href=\"#測試-2\" class=\"headerlink\" title=\"測試\"></a>測試</h3><p>Postman GET<br><a href=\"http://localhost:10080/api/v1/states/1\">http://localhost:10080/api/v1/states/1</a><br>檢查是否回傳預想中的值</p>\n","feature":true,"text":"[Golang] Gin框架+GORM 搭建API Server(3)前言上一節完成了基本的路由註冊功能，本節將完成對資料庫的連線部分。根據第一節，建立了 device_infos device_states device_actives 而三支API分別為 &#x2F;api&...","link":"","photos":[],"count_time":{"symbolsCount":"9.6k","symbolsTime":"9 mins."},"categories":[{"name":"Golang","slug":"Golang","count":4,"path":"api/categories/Golang.json"}],"tags":[{"name":"Gin","slug":"Gin","count":3,"path":"api/tags/Gin.json"},{"name":"GORM","slug":"GORM","count":3,"path":"api/tags/GORM.json"},{"name":"PostgreSQL","slug":"PostgreSQL","count":3,"path":"api/tags/PostgreSQL.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Golang-Gin%E6%A1%86%E6%9E%B6-GORM-%E6%90%AD%E5%BB%BAAPI-Server-3\"><span class=\"toc-text\">[Golang] Gin框架+GORM 搭建API Server(3)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E7%AF%80%E7%9B%AE%E6%A8%99\"><span class=\"toc-text\">本節目標</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%9B%AE%E9%8C%84%E7%B5%90%E6%A7%8B\"><span class=\"toc-text\">基本目錄結構</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PostgreSQL%E5%BB%BA%E7%AB%8B%E6%AA%A2%E8%A6%96%E8%A1%A8\"><span class=\"toc-text\">PostgreSQL建立檢視表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#actives\"><span class=\"toc-text\">actives</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BB%BA%E7%AB%8B%E8%B3%87%E6%96%99\"><span class=\"toc-text\">建立資料</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#device-actives\"><span class=\"toc-text\">device_actives</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#devices-infos\"><span class=\"toc-text\">devices_infos</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#devices-states\"><span class=\"toc-text\">devices_states</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BB%BA%E7%AB%8BGORM%E9%80%A3%E7%B7%9A\"><span class=\"toc-text\">建立GORM連線</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#models-go\"><span class=\"toc-text\">models.go</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A8%AD%E5%82%99%E7%8B%80%E6%85%8B%E8%AB%8B%E6%B1%82%E8%88%87%E7%8D%B2%E5%8F%96%E8%B3%87%E6%96%99\"><span class=\"toc-text\">設備狀態請求與獲取資料</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#models-x2F-actives-go\"><span class=\"toc-text\">models&#x2F;actives.go</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#routes-x2F-v1-x2F-actives-go\"><span class=\"toc-text\">routes&#x2F;v1&#x2F;actives.go</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B8%AC%E8%A9%A6\"><span class=\"toc-text\">測試</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9%E8%A8%AD%E5%82%99%E6%B4%BB%E8%BA%8D%E7%8B%80%E6%85%8B\"><span class=\"toc-text\">修改設備活躍狀態</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#models-x2F-device-actives-go\"><span class=\"toc-text\">models&#x2F;device_actives.go</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#routes-x2F-v1-x2F-actives-go-1\"><span class=\"toc-text\">routes&#x2F;v1&#x2F;actives.go</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B8%AC%E8%A9%A6-1\"><span class=\"toc-text\">測試</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%8D%B2%E5%8F%96%E3%80%8C%E7%95%B0%E5%B8%B8%E4%BD%86%E6%9C%AA%E8%A2%AB%E6%8E%92%E9%99%A4%E3%80%8D%E8%A8%AD%E5%82%99%E7%8B%80%E6%85%8B\"><span class=\"toc-text\">獲取「異常但未被排除」設備狀態</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#models-x2F-device-states-go\"><span class=\"toc-text\">models&#x2F;device_states.go</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#routes-x2F-v1-x2F-states-go\"><span class=\"toc-text\">routes&#x2F;v1&#x2F;states.go</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B8%AC%E8%A9%A6-2\"><span class=\"toc-text\">測試</span></a></li></ol></li></ol></li></ol>","author":{"name":"猴子工程師","slug":"blog-author","avatar":"https://i.imgur.com/5BVPyT3_d.webp","link":"/","description":"只要坑掉多了<br />猴子也能完成莎士比亞全集","socials":{"github":"https://github.com/Danny-CH4NG","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Angular-在Angular中導入字體","uid":"d9fe100c771f9989c0ed345ca6b5a523","slug":"Angular-在Angular中導入字體","date":"2022-03-14T14:48:26.000Z","updated":"2022-03-14T14:49:31.048Z","comments":true,"path":"api/articles/Angular-在Angular中導入字體.json","keywords":null,"cover":null,"text":"取得字體樣式文件我們以常用的Google Noto Fonts作為舉例https://fonts.google.com/noto/fonts選擇任意自行後，下載得到附檔名為.otf的檔案(或是.ttf也可以)將檔案放入&#x2F;assets&#x2F;fonts資料夾 建立cs...","link":"","photos":[],"count_time":{"symbolsCount":440,"symbolsTime":"1 mins."},"categories":[{"name":"Angular","slug":"Angular","count":2,"path":"api/categories/Angular.json"}],"tags":[{"name":"CSS","slug":"CSS","count":1,"path":"api/tags/CSS.json"}],"author":{"name":"猴子工程師","slug":"blog-author","avatar":"https://i.imgur.com/5BVPyT3_d.webp","link":"/","description":"只要坑掉多了<br />猴子也能完成莎士比亞全集","socials":{"github":"https://github.com/Danny-CH4NG","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Golang-Gin框架+GORM搭建APIServer(2)","uid":"99518835ef4ff4e31bb03642fa3bcfe3","slug":"Golang-Gin框架-GORM搭建APIServer-2","date":"2021-10-21T04:27:30.000Z","updated":"2021-10-21T04:28:54.556Z","comments":true,"path":"api/articles/Golang-Gin框架-GORM搭建APIServer-2.json","keywords":null,"cover":null,"text":"前言功能需求如下： 取得所有的已被排除在外的設備與基本訊息 根據device_id變換設備是否排除 取得所有的「異常但未被排除」設備 根據Restful的設計風格，我們應有以下三支API： GET(“&#x2F;api&#x2F;v1&#x2F;actives&#x2F;:act...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"Golang","slug":"Golang","count":4,"path":"api/categories/Golang.json"}],"tags":[{"name":"Gin","slug":"Gin","count":3,"path":"api/tags/Gin.json"},{"name":"GORM","slug":"GORM","count":3,"path":"api/tags/GORM.json"},{"name":"PostgreSQL","slug":"PostgreSQL","count":3,"path":"api/tags/PostgreSQL.json"}],"author":{"name":"猴子工程師","slug":"blog-author","avatar":"https://i.imgur.com/5BVPyT3_d.webp","link":"/","description":"只要坑掉多了<br />猴子也能完成莎士比亞全集","socials":{"github":"https://github.com/Danny-CH4NG","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}