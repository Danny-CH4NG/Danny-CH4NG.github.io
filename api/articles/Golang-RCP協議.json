{"title":"Golang-RCP協議","uid":"17e78b64810282ffd93c25608f3b11d9","slug":"Golang-RCP協議","date":"2021-09-09T13:26:59.000Z","updated":"2021-09-09T13:30:15.597Z","comments":true,"path":"api/articles/Golang-RCP協議.json","keywords":null,"cover":null,"content":"<p>RPC: 遠程行程(進程，單一程式)調用協議，使用TCP，屬於應用層協議，與http協議同層<br><strong>==可理解為調用內部函數一樣，調用網路中其他程式的函數==</strong><br>通過RPC協議，傳遞：函數名、參數，從原處調用另一處函數，返回結果到原處</p>\n<ul>\n<li>每個微服務彼此獨立</li>\n<li>程式與程式之間可使用不同程式語言</li>\n</ul>\n<h3 id=\"前導知識-Go-socket\"><a href=\"#前導知識-Go-socket\" class=\"headerlink\" title=\"前導知識 Go socket\"></a>前導知識 Go socket</h3><h4 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">net.Listen() -- listener\nlistener.Accept() -- conn\nconn.read()\nconn.write()\ndefer conn.close()&#x2F;listener.Close()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"client\"><a href=\"#client\" class=\"headerlink\" title=\"client\"></a>client</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">net.Dial() -- conn\nconn.Write()\nconn.Read()\ndefer conn.Close()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"RPC使用步驟\"><a href=\"#RPC使用步驟\" class=\"headerlink\" title=\"RPC使用步驟\"></a>RPC使用步驟</h2><h4 id=\"server-1\"><a href=\"#server-1\" class=\"headerlink\" title=\"server\"></a>server</h4><ol>\n<li>註冊RPC服務對象，給對象綁定方法(1.定義類 2.綁定類方法)<pre class=\"line-numbers language-none\"><code class=\"language-none\">rpc.RegisterName(&lt;服務名&gt;, &lt;回調對象&gt;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>創建監聽器<pre class=\"line-numbers language-none\"><code class=\"language-none\">listener, err :&#x3D; net.Listen()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>建立連結<pre class=\"line-numbers language-none\"><code class=\"language-none\">conn, err :&#x3D; listener.Accept()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>將連結綁定RPC服務<pre class=\"line-numbers language-none\"><code class=\"language-none\">rpc.ServeConn(conn)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<h4 id=\"client-1\"><a href=\"#client-1\" class=\"headerlink\" title=\"client\"></a>client</h4><ol>\n<li>用RPC連結server<pre class=\"line-numbers language-none\"><code class=\"language-none\">conn, err :&#x3D; rpc.Dial()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>調用遠程函數<pre class=\"line-numbers language-none\"><code class=\"language-none\">conn.Call(&lt;服務名.方法名&gt;, &lt;傳入參數&gt;, &lt;傳出參數&gt;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"RPC相關函數\"><a href=\"#RPC相關函數\" class=\"headerlink\" title=\"RPC相關函數\"></a>RPC相關函數</h2><ol>\n<li><p>==RegisterName()== 註冊服務</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">func (server *Server) RegisterName(name&lt;服務名&gt; string, rcvr&lt;對應rpc對象&gt; interface&#123;&#125;) error<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>rcvr必須滿足條件：<br>(1) 必須導出：public, 首字母大寫<br>(2) 方法必須有2個參數：public、內建類型<br>(3) 第2個參數為指針<br>(4) 方法只有一個error接口返回值</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">type Sample struct&#123;\n&#125;\n\nfunc (this *Sample) Test(name string, resp *string) error &#123;\n&#125;\n\nrpc.RegisterName(&quot;服務名&quot;, new(Test))<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>==ServeConn()== 綁定rpc服務</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">func (server *Server) ServeConn(conn io.ReadWriteCloser)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>conn: 建立連線的socket</p>\n</li>\n<li><p>==Call()== 調用遠程函數</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">func (client *Client) Go(serviceMethod string, args interface&#123;&#125;, reply interface&#123;&#125;, done chan *Call) *Call<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>serviceMethod: 服務名.方法名<br>args: 傳入參數(方法需要的參數)<br>reply: 傳出參數(方法返回的結果)(建立變量，&amp;變量)</p>\n</li>\n</ol>\n<h2 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h2><h3 id=\"server端\"><a href=\"#server端\" class=\"headerlink\" title=\"server端\"></a>server端</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;net&quot;\n\t&quot;net&#x2F;rpc&quot;\n)\n\n&#x2F;&#x2F; 定義對象\ntype Sample struct &#123;\n&#125;\n\n&#x2F;&#x2F; 建立方法\nfunc (this *Sample) TestSample(name string, resp *string) error &#123;\n\t*resp &#x3D; name + &quot;返回&quot;\n\treturn nil\n&#125;\n\nfunc main() &#123;\n\t&#x2F;&#x2F; 1. 註冊rpc，綁定對象方法\n\terr :&#x3D; rpc.RegisterName(&quot;service&quot;, new(Sample))\n\tif err !&#x3D; nil &#123;\n\t\tfmt.Printf(&quot;註冊rpc失敗，err &#x3D; %v&quot;, err)\n\t\treturn\n\t&#125;\n\n\t&#x2F;&#x2F; 2. 設置監聽\n\tlistener, err :&#x3D; net.Listen(&quot;tcp&quot;, &quot;127.0.0.1:8800&quot;)\n\tif err !&#x3D; nil &#123;\n\t\tfmt.Printf(&quot;設置監聽失敗，err &#x3D; %v&quot;, err)\n\t\treturn\n\t&#125;\n\tdefer listener.Close()\n\tfmt.Println(&quot;Start Listen...&quot;)\n\n\t&#x2F;&#x2F; 3. 建立連結\n\tconn, err :&#x3D; listener.Accept()\n\tif err !&#x3D; nil &#123;\n\t\tfmt.Printf(&quot;建立連結失敗，err &#x3D; %v&quot;, err)\n\t\treturn\n\t&#125;\n\tdefer conn.Close()\n\tfmt.Println(&quot;Start Connect...&quot;)\n\n\t&#x2F;&#x2F; 4. 綁定服務\n\trpc.ServeConn(conn)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"client端\"><a href=\"#client端\" class=\"headerlink\" title=\"client端\"></a>client端</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;net&#x2F;rpc&quot;\n)\n\nfunc main() &#123;\n\t&#x2F;&#x2F; 1. 用rpc連接server\n\tconn, err :&#x3D; rpc.Dial(&quot;tcp&quot;, &quot;127.0.0.1:8800&quot;)\n\tif err !&#x3D; nil &#123;\n\t\tfmt.Printf(&quot;rpc連接失敗，err &#x3D; %v&quot;, err)\n\t\treturn\n\t&#125;\n\tdefer conn.Close()\n\t&#x2F;&#x2F; 2. 調用遠程函數\n\tvar req string\n\terr &#x3D; conn.Call(&quot;service.TestSample&quot;, &quot;something&quot;, &amp;req)\n\tif err !&#x3D; nil &#123;\n\t\tfmt.Printf(&quot;調用遠程函數失敗，err &#x3D; %v&quot;, err)\n\t\treturn\n\t&#125;\n\n\tfmt.Println(req)\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"序列化\"><a href=\"#序列化\" class=\"headerlink\" title=\"序列化\"></a>序列化</h2><p>因為rpc使用go特有序列化gob，網路通訊中其他語言將會產生亂碼<br>因此需使用通用序列化、反序列化方案：JSON、protobuf</p>\n<p>有內建package ==”net/rpc/jsonrpc”==</p>\n<h3 id=\"server-2\"><a href=\"#server-2\" class=\"headerlink\" title=\"server\"></a>server</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">jsonrpc.ServeConn(conn)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"client端-1\"><a href=\"#client端-1\" class=\"headerlink\" title=\"client端\"></a>client端</h3><p>```<br>conn, err := jsonrpc.Dial(“tcp”, “127.0.0.1:8800”)</p>\n","feature":true,"text":"RPC: 遠程行程(進程，單一程式)調用協議，使用TCP，屬於應用層協議，與http協議同層==可理解為調用內部函數一樣，調用網路中其他程式的函數==通過RPC協議，傳遞：函數名、參數，從原處調用另一處函數，返回結果到原處 每個微服務彼此獨立 程式與程式之間可使用不同程式語言 前...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"Golang","slug":"Golang","count":2,"path":"api/categories/Golang.json"}],"tags":[{"name":"RPC","slug":"RPC","count":1,"path":"api/tags/RPC.json"},{"name":"網路架構","slug":"網路架構","count":1,"path":"api/tags/網路架構.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%89%8D%E5%B0%8E%E7%9F%A5%E8%AD%98-Go-socket\"><span class=\"toc-text\">前導知識 Go socket</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#server\"><span class=\"toc-text\">server</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#client\"><span class=\"toc-text\">client</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#RPC%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%A9%9F\"><span class=\"toc-text\">RPC使用步驟</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#server-1\"><span class=\"toc-text\">server</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#client-1\"><span class=\"toc-text\">client</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#RPC%E7%9B%B8%E9%97%9C%E5%87%BD%E6%95%B8\"><span class=\"toc-text\">RPC相關函數</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#DEMO\"><span class=\"toc-text\">DEMO</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#server%E7%AB%AF\"><span class=\"toc-text\">server端</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#client%E7%AB%AF\"><span class=\"toc-text\">client端</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">序列化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#server-2\"><span class=\"toc-text\">server</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#client%E7%AB%AF-1\"><span class=\"toc-text\">client端</span></a></li></ol>","author":{"name":"猴子工程師","slug":"blog-author","avatar":"https://i.imgur.com/5BVPyT3_d.webp","link":"/","description":"只要坑掉多了<br />猴子也能完成莎士比亞全集","socials":{"github":"https://github.com/Danny-CH4NG","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Golang-Gin框架+GORM搭建APIServer(1)","uid":"bb9ea1063e87aa3740889487d9f40ff2","slug":"Golang-Gin框架-GORM搭建APIServer-1","date":"2021-10-17T07:01:36.000Z","updated":"2021-10-17T07:02:04.437Z","comments":true,"path":"api/articles/Golang-Gin框架-GORM搭建APIServer-1.json","keywords":null,"cover":null,"text":"前言 後端：Golang Gin框架 資料庫：PostgreSQL 這裡我們來做一個簡單的設備監控平台，初期階段有以下功能： 儲存設備的基本資料(id, 類型, 地址) 從資料庫中取得狀態異常的設備(id, 異常狀態代碼) 讓使用者可以排除特定設備，因此需要一個設備活躍狀態的資料...","link":"","photos":[],"count_time":{"symbolsCount":"6.3k","symbolsTime":"6 mins."},"categories":[{"name":"Golang","slug":"Golang","count":2,"path":"api/categories/Golang.json"}],"tags":[{"name":"Gin","slug":"Gin","count":1,"path":"api/tags/Gin.json"},{"name":"GORM","slug":"GORM","count":1,"path":"api/tags/GORM.json"},{"name":"PostgreSQL","slug":"PostgreSQL","count":1,"path":"api/tags/PostgreSQL.json"}],"author":{"name":"猴子工程師","slug":"blog-author","avatar":"https://i.imgur.com/5BVPyT3_d.webp","link":"/","description":"只要坑掉多了<br />猴子也能完成莎士比亞全集","socials":{"github":"https://github.com/Danny-CH4NG","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Angular-色彩主題切換","uid":"a47de5cab978593bde43925482e0346b","slug":"Angular-色彩主題切換","date":"2021-08-30T12:40:22.000Z","updated":"2021-09-09T13:29:34.813Z","comments":true,"path":"api/articles/Angular-色彩主題切換.json","keywords":null,"cover":[],"text":"簡單介紹一下色彩切換功能 建立2個獨立的主題$dark-primary: mat-palette($dark-primary, 900); $dark-accent: mat-palette($mat-cyan); $dark-warn: mat-palette($mat-red...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"Angular","slug":"Angular","count":1,"path":"api/categories/Angular.json"}],"tags":[{"name":"Material-UI","slug":"Material-UI","count":1,"path":"api/tags/Material-UI.json"}],"author":{"name":"猴子工程師","slug":"blog-author","avatar":"https://i.imgur.com/5BVPyT3_d.webp","link":"/","description":"只要坑掉多了<br />猴子也能完成莎士比亞全集","socials":{"github":"https://github.com/Danny-CH4NG","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}