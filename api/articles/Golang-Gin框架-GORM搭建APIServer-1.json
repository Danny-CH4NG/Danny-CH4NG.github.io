{"title":"Golang-Gin框架+GORM搭建APIServer(1)","uid":"bb9ea1063e87aa3740889487d9f40ff2","slug":"Golang-Gin框架-GORM搭建APIServer-1","date":"2021-10-17T07:01:36.000Z","updated":"2021-10-21T04:28:53.932Z","comments":true,"path":"api/articles/Golang-Gin框架-GORM搭建APIServer-1.json","keywords":null,"cover":null,"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><ul>\n<li>後端：Golang Gin框架</li>\n<li>資料庫：PostgreSQL</li>\n</ul>\n<p>這裡我們來做一個簡單的設備監控平台，初期階段有以下功能：</p>\n<ul>\n<li>儲存設備的基本資料(id, 類型, 地址)</li>\n<li>從資料庫中取得狀態異常的設備(id, 異常狀態代碼)</li>\n<li>讓使用者可以排除特定設備，因此需要一個設備活躍狀態的資料表(id, 活躍狀態代碼)</li>\n</ul>\n<p>以上需求構成了我們的三張資料表：</p>\n<ol>\n<li>device_info(device_id, type, address)&lt;靜態&gt;</li>\n<li>device_state(id, device_id, state, update_time)&lt;動態/未來會有其他功能進行寫入&gt;</li>\n<li>device_active(device_id, active)&lt;靜態&gt;</li>\n</ol>\n<h2 id=\"本節目標\"><a href=\"#本節目標\" class=\"headerlink\" title=\"本節目標\"></a>本節目標</h2><ul>\n<li>建立基本目錄結構與資料庫</li>\n<li>讀取yml設定檔進行配置</li>\n</ul>\n<h2 id=\"項目初始化\"><a href=\"#項目初始化\" class=\"headerlink\" title=\"項目初始化\"></a>項目初始化</h2><h3 id=\"基本目錄結構\"><a href=\"#基本目錄結構\" class=\"headerlink\" title=\"基本目錄結構\"></a>基本目錄結構</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">server&#x2F;\n├── config &#x2F;&#x2F; 配置讀取yaml設定\n├── middleware &#x2F;&#x2F; 中間件\n├── models &#x2F;&#x2F; 放置gorm的數據庫模型\n├── routers &#x2F;&#x2F; 路由邏輯\n├── config.yml &#x2F;&#x2F; 設定檔\n└── server.go &#x2F;&#x2F; 入口<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"建立一個基本資料庫-不會用docker可跳過\"><a href=\"#建立一個基本資料庫-不會用docker可跳過\" class=\"headerlink\" title=\"建立一個基本資料庫(不會用docker可跳過)\"></a>建立一個基本資料庫(不會用docker可跳過)</h3><p>建立data資料庫，建議使用docker-compose快速建立</p>\n<h4 id=\"docker-compose-yaml\"><a href=\"#docker-compose-yaml\" class=\"headerlink\" title=\"docker-compose.yaml\"></a>docker-compose.yaml</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">version: &quot;3&quot;\nservices:\n  pgsql:\n    image: postgres\n    container_name: pgsql\n    volumes:\n      - .&#x2F;Postgresql:&#x2F;data&#x2F;postgres\n      # - .&#x2F;sqls:&#x2F;docker-entrypoint-initdb.d\n    environment:\n      POSTGRES_ROOT_PASSWORD: password\n      POSTGRES_DB: data\n      POSTGRES_USER: $&#123;POSTGRES_USER:-user&#125;\n      POSTGRES_PASSWORD: $&#123;POSTGRES_PASSWORD:-password&#125;\n    ports:\n      - &quot;5432:5432&quot;\n    restart: always<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"1-建立設備基本資料靜態表\"><a href=\"#1-建立設備基本資料靜態表\" class=\"headerlink\" title=\"1. 建立設備基本資料靜態表\"></a>1. 建立設備基本資料靜態表</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">CREATE TABLE IF NOT EXISTS public.device_info\n(\n    device_id character varying(20) COLLATE pg_catalog.&quot;default&quot; NOT NULL,\n    type character varying(10) COLLATE pg_catalog.&quot;default&quot; NOT NULL,\n    address character varying(100) COLLATE pg_catalog.&quot;default&quot;,\n    CONSTRAINT device_info_pkey PRIMARY KEY (device_id)\n)\n\nTABLESPACE pg_default;\n\nALTER TABLE IF EXISTS public.device_info\n    OWNER to user;\n\nCOMMENT ON COLUMN public.device_info.device_id\n    IS &#39;設備id&#39;;\n\nCOMMENT ON COLUMN public.device_info.type\n    IS &#39;設備類型(&#39;&#39;CMS&#39;&#39;, &#39;&#39;TC&#39;&#39;, &#39;&#39;CCTV&#39;&#39;, &#39;&#39;eTag&#39;&#39;)&#39;;\n\nCOMMENT ON COLUMN public.device_info.address\n    IS &#39;設備中文地址&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"2-建立設備活躍狀態靜態表\"><a href=\"#2-建立設備活躍狀態靜態表\" class=\"headerlink\" title=\"2. 建立設備活躍狀態靜態表\"></a>2. 建立設備活躍狀態靜態表</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">-- Table: public.device_active\n\n-- DROP TABLE IF EXISTS public.device_active;\n\nCREATE TABLE IF NOT EXISTS public.device_active\n(\n    device_id character varying(20) COLLATE pg_catalog.&quot;default&quot; NOT NULL,\n    active integer DEFAULT 0,\n    CONSTRAINT device_active_pkey PRIMARY KEY (device_id)\n)\n\nTABLESPACE pg_default;\n\nALTER TABLE IF EXISTS public.device_active\n    OWNER to user;\n\nCOMMENT ON COLUMN public.device_active.device_id\n    IS &#39;設備id&#39;;\n\nCOMMENT ON COLUMN public.device_active.active\n    IS &#39;設備是否被排除(0: 否, 1:是)&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"3-建立設備狀態表\"><a href=\"#3-建立設備狀態表\" class=\"headerlink\" title=\"3. 建立設備狀態表\"></a>3. 建立設備狀態表</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">CREATE TABLE IF NOT EXISTS public.device_state\n(\n    id integer NOT NULL DEFAULT nextval(&#39;device_state_id_seq&#39;::regclass),\n    device_id character varying(20) COLLATE pg_catalog.&quot;default&quot; NOT NULL,\n    state integer DEFAULT 0,\n    update_time time with time zone,\n    CONSTRAINT device_state_pkey PRIMARY KEY (id)\n)\n\nTABLESPACE pg_default;\n\nALTER TABLE IF EXISTS public.device_state\n    OWNER to user;\n\nCOMMENT ON COLUMN public.device_state.id\n    IS &#39;流水號&#39;;\n\nCOMMENT ON COLUMN public.device_state.device_id\n    IS &#39;設備id&#39;;\n\nCOMMENT ON COLUMN public.device_state.state\n    IS &#39;設備狀態(0:正常, 1:自動通報異常, 2:人工通報異常)&#39;;\n\nCOMMENT ON COLUMN public.device_state.update_time\n    IS &#39;通報時間&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"編寫簡易的設定檔\"><a href=\"#編寫簡易的設定檔\" class=\"headerlink\" title=\"編寫簡易的設定檔\"></a>編寫簡易的設定檔</h3><p>config.yml</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mode: &quot;debug&quot;\n\nserver:\n  port: &quot;3601&quot;\n\ndb:\n  type: &quot;postgresql&quot;\n  ip: &quot;localhost&quot;\n  port: &quot;5432&quot;\n  userID: &quot;thi&quot;\n  password: &quot;thi&quot;\n  database: &quot;device&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意，yml的編寫縮排有強制規定</p>\n<h2 id=\"編寫啟動入口文件\"><a href=\"#編寫啟動入口文件\" class=\"headerlink\" title=\"編寫啟動入口文件\"></a>編寫啟動入口文件</h2><h3 id=\"server-go\"><a href=\"#server-go\" class=\"headerlink\" title=\"server.go\"></a>server.go</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">package main\n\nimport (\n\t&quot;github.com&#x2F;rs&#x2F;zerolog&#x2F;log&quot;\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\n\nfunc main() &#123;\n\tlog.Logger &#x3D; log.With().Caller().Logger()\n\tr :&#x3D; gin.Default()\n\tr.GET(&quot;&#x2F;ping&quot;, func(c *gin.Context) &#123;\n\t\tc.JSON(200, gin.H&#123;\n\t\t\t&quot;message&quot;: &quot;pong&quot;,\n\t\t&#125;)\n        log.Info().Msg(&quot;&#x2F;ping success&quot;)\n\t&#125;)\n\tr.Run(&quot;:3601&quot;)\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>導入gin package，建立一個最基本的server</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">go mod init server\ngo mod tidy\ngo run server.go<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>訪問 localhost:3601/ping，測試是否返回”pong”</p>\n<h2 id=\"編寫讀取設定檔的方式\"><a href=\"#編寫讀取設定檔的方式\" class=\"headerlink\" title=\"編寫讀取設定檔的方式\"></a>編寫讀取設定檔的方式</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">server&#x2F;\n├── config &#x2F;&#x2F; 配置讀取yaml設定\n│   └── config.go &#x2F;&#x2F; 讀取yml設定\n├── middleware &#x2F;&#x2F; 中間件\n├── models &#x2F;&#x2F; 放置gorm的數據庫模型\n├── routers &#x2F;&#x2F; 路由邏輯\n├── config.yml &#x2F;&#x2F; 設定檔\n└── server.go &#x2F;&#x2F; 入口<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"config-go\"><a href=\"#config-go\" class=\"headerlink\" title=\"config.go\"></a>config.go</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">package config\n\nimport (\n\t&quot;io&#x2F;ioutil&quot;\n\n\t&quot;github.com&#x2F;rs&#x2F;zerolog&#x2F;log&quot;\n\t&quot;gopkg.in&#x2F;yaml.v2&quot;\n)\n\nvar Config Configer &#x2F;&#x2F; 設定參數\n\n&#x2F;&#x2F; Config\ntype Configer struct &#123;\n\tMode string &#96;yaml:&quot;mode&quot;&#96;\n\tApi  struct &#123;\n\t\tUrl       string &#96;yaml:&quot;url&quot;&#96;\n\t\tFrequency int    &#96;yaml:&quot;frequency&quot;&#96;\n\t\tRefresh   int    &#96;yaml:&quot;refresh&quot;&#96;\n\t&#125; &#96;yaml:&quot;api&quot;&#96;\n\tServer struct &#123;\n\t\tPort string &#96;yaml:&quot;port&quot;&#96;\n\t&#125; &#96;yaml:&quot;server&quot;&#96;\n\tPgsql struct &#123;\n\t\tIP       string &#96;yaml:&quot;ip&quot;&#96;\n\t\tUserID   string &#96;yaml:&quot;userID&quot;&#96;\n\t\tPassword string &#96;yaml:&quot;password&quot;&#96;\n\t\tDatabase string &#96;yaml:&quot;database&quot;&#96;\n\t&#125; &#96;yaml:&quot;pgsql&quot;&#96;\n&#125;\n\nfunc init() &#123;\n\t&#x2F;&#x2F; 讀取yml文件\n\tyamlFile, err :&#x3D; ioutil.ReadFile(&quot;config.yml&quot;)\n\tif err !&#x3D; nil &#123;\n\t\tlog.Error().Err(err).Msg(&quot;無法讀取yaml file&quot;)\n\t\treturn\n\t&#125;\n\t&#x2F;&#x2F; 將yml檔解析成struct\n\terr &#x3D; yaml.Unmarshal(yamlFile, &amp;Config)\n\tif err !&#x3D; nil &#123;\n\t\tlog.Error().Err(err).Msg(&quot;yaml無法解析&quot;)\n\t\treturn\n\t&#125;\n\n\tif Config.Mode &#x3D;&#x3D; &quot;debug&quot; &#123;\n\t\tlog.Info().Msgf(&quot;yaml解析結果: %v&quot;, Config)\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>將server.go 的port改成吃設定檔而非寫死，未來移植時不用從code一個一個找出來變更</p>\n<h3 id=\"server-go-1\"><a href=\"#server-go-1\" class=\"headerlink\" title=\"server.go\"></a>server.go</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">package main\n\nimport (\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n\t&quot;github.com&#x2F;rs&#x2F;zerolog&#x2F;log&quot;\n\n\t&quot;server&#x2F;config&quot;\n)\n\nfunc main() &#123;\n\t&#x2F;&#x2F; 調用zerolog結構化log輸出\n\tlog.Logger &#x3D; log.With().Caller().Logger()\n    \n\tr :&#x3D; gin.Default()\n\tr.GET(&quot;&#x2F;ping&quot;, func(c *gin.Context) &#123;\n\t\tc.JSON(200, gin.H&#123;\n\t\t\t&quot;message&quot;: &quot;pong&quot;,\n\t\t&#125;)\n        log.Info().Msg(&quot;&#x2F;ping success&quot;)\n\t&#125;)\n\tr.Run(&quot;:&quot; + config.Config.Server.Port)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","feature":true,"text":"前言 後端：Golang Gin框架 資料庫：PostgreSQL 這裡我們來做一個簡單的設備監控平台，初期階段有以下功能： 儲存設備的基本資料(id, 類型, 地址) 從資料庫中取得狀態異常的設備(id, 異常狀態代碼) 讓使用者可以排除特定設備，因此需要一個設備活躍狀態的資料...","link":"","photos":[],"count_time":{"symbolsCount":"6.3k","symbolsTime":"6 mins."},"categories":[{"name":"Golang","slug":"Golang","count":4,"path":"api/categories/Golang.json"}],"tags":[{"name":"Gin","slug":"Gin","count":3,"path":"api/tags/Gin.json"},{"name":"GORM","slug":"GORM","count":3,"path":"api/tags/GORM.json"},{"name":"PostgreSQL","slug":"PostgreSQL","count":3,"path":"api/tags/PostgreSQL.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E7%AF%80%E7%9B%AE%E6%A8%99\"><span class=\"toc-text\">本節目標</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A0%85%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">項目初始化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%9B%AE%E9%8C%84%E7%B5%90%E6%A7%8B\"><span class=\"toc-text\">基本目錄結構</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BB%BA%E7%AB%8B%E4%B8%80%E5%80%8B%E5%9F%BA%E6%9C%AC%E8%B3%87%E6%96%99%E5%BA%AB-%E4%B8%8D%E6%9C%83%E7%94%A8docker%E5%8F%AF%E8%B7%B3%E9%81%8E\"><span class=\"toc-text\">建立一個基本資料庫(不會用docker可跳過)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#docker-compose-yaml\"><span class=\"toc-text\">docker-compose.yaml</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%BB%BA%E7%AB%8B%E8%A8%AD%E5%82%99%E5%9F%BA%E6%9C%AC%E8%B3%87%E6%96%99%E9%9D%9C%E6%85%8B%E8%A1%A8\"><span class=\"toc-text\">1. 建立設備基本資料靜態表</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%BB%BA%E7%AB%8B%E8%A8%AD%E5%82%99%E6%B4%BB%E8%BA%8D%E7%8B%80%E6%85%8B%E9%9D%9C%E6%85%8B%E8%A1%A8\"><span class=\"toc-text\">2. 建立設備活躍狀態靜態表</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%BB%BA%E7%AB%8B%E8%A8%AD%E5%82%99%E7%8B%80%E6%85%8B%E8%A1%A8\"><span class=\"toc-text\">3. 建立設備狀態表</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B7%A8%E5%AF%AB%E7%B0%A1%E6%98%93%E7%9A%84%E8%A8%AD%E5%AE%9A%E6%AA%94\"><span class=\"toc-text\">編寫簡易的設定檔</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B7%A8%E5%AF%AB%E5%95%9F%E5%8B%95%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">編寫啟動入口文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#server-go\"><span class=\"toc-text\">server.go</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B7%A8%E5%AF%AB%E8%AE%80%E5%8F%96%E8%A8%AD%E5%AE%9A%E6%AA%94%E7%9A%84%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">編寫讀取設定檔的方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#config-go\"><span class=\"toc-text\">config.go</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#server-go-1\"><span class=\"toc-text\">server.go</span></a></li></ol></li></ol>","author":{"name":"猴子工程師","slug":"blog-author","avatar":"https://i.imgur.com/5BVPyT3_d.webp","link":"/","description":"只要坑掉多了<br />猴子也能完成莎士比亞全集","socials":{"github":"https://github.com/Danny-CH4NG","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Golang-Gin框架+GORM搭建APIServer(2)","uid":"99518835ef4ff4e31bb03642fa3bcfe3","slug":"Golang-Gin框架-GORM搭建APIServer-2","date":"2021-10-21T04:27:30.000Z","updated":"2021-10-21T04:28:54.556Z","comments":true,"path":"api/articles/Golang-Gin框架-GORM搭建APIServer-2.json","keywords":null,"cover":null,"text":"前言功能需求如下： 取得所有的已被排除在外的設備與基本訊息 根據device_id變換設備是否排除 取得所有的「異常但未被排除」設備 根據Restful的設計風格，我們應有以下三支API： GET(“/api/v1/actives/:active”) 獲取已排除、未排除or全部的...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"Golang","slug":"Golang","count":4,"path":"api/categories/Golang.json"}],"tags":[{"name":"Gin","slug":"Gin","count":3,"path":"api/tags/Gin.json"},{"name":"GORM","slug":"GORM","count":3,"path":"api/tags/GORM.json"},{"name":"PostgreSQL","slug":"PostgreSQL","count":3,"path":"api/tags/PostgreSQL.json"}],"author":{"name":"猴子工程師","slug":"blog-author","avatar":"https://i.imgur.com/5BVPyT3_d.webp","link":"/","description":"只要坑掉多了<br />猴子也能完成莎士比亞全集","socials":{"github":"https://github.com/Danny-CH4NG","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Golang-RCP協議","uid":"17e78b64810282ffd93c25608f3b11d9","slug":"Golang-RCP協議","date":"2021-09-09T13:26:59.000Z","updated":"2021-09-09T13:30:15.597Z","comments":true,"path":"api/articles/Golang-RCP協議.json","keywords":null,"cover":null,"text":"RPC: 遠程行程(進程，單一程式)調用協議，使用TCP，屬於應用層協議，與http協議同層==可理解為調用內部函數一樣，調用網路中其他程式的函數==通過RPC協議，傳遞：函數名、參數，從原處調用另一處函數，返回結果到原處 每個微服務彼此獨立 程式與程式之間可使用不同程式語言 前...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"Golang","slug":"Golang","count":4,"path":"api/categories/Golang.json"}],"tags":[{"name":"RPC","slug":"RPC","count":1,"path":"api/tags/RPC.json"},{"name":"網路架構","slug":"網路架構","count":1,"path":"api/tags/網路架構.json"}],"author":{"name":"猴子工程師","slug":"blog-author","avatar":"https://i.imgur.com/5BVPyT3_d.webp","link":"/","description":"只要坑掉多了<br />猴子也能完成莎士比亞全集","socials":{"github":"https://github.com/Danny-CH4NG","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}