{"title":"Golang-Gin框架+GORM搭建APIServer(2)","uid":"99518835ef4ff4e31bb03642fa3bcfe3","slug":"Golang-Gin框架-GORM搭建APIServer-2","date":"2021-10-21T04:27:30.000Z","updated":"2021-10-21T04:28:54.556Z","comments":true,"path":"api/articles/Golang-Gin框架-GORM搭建APIServer-2.json","keywords":null,"cover":null,"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>功能需求如下：</p>\n<ol>\n<li>取得所有的已被排除在外的設備與基本訊息</li>\n<li>根據device_id變換設備是否排除</li>\n<li>取得所有的「異常但未被排除」設備</li>\n</ol>\n<p>根據Restful的設計風格，我們應有以下三支API：</p>\n<ol>\n<li>GET(“/api/v1/actives/:active”) 獲取已排除、未排除or全部的設備狀態</li>\n<li>PUT(“/api/v1/actives/:device_id”) 將設備狀態變換</li>\n<li>GET(“/api/v1/states/:state”) 獲取「異常但未被排除」設備狀態</li>\n</ol>\n<p>整體流程：</p>\n<ol>\n<li>由配合device_actives表的API與device_states表的API開始</li>\n<li>router.go 將API Group，並將gin.Engine的建立移到此處</li>\n<li>改寫server.go</li>\n</ol>\n<h2 id=\"本節目標\"><a href=\"#本節目標\" class=\"headerlink\" title=\"本節目標\"></a>本節目標</h2><ul>\n<li>建立API架構與路由註冊</li>\n</ul>\n<h3 id=\"基本目錄結構\"><a href=\"#基本目錄結構\" class=\"headerlink\" title=\"基本目錄結構\"></a>基本目錄結構</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">server&#x2F;\n├── config &#x2F;&#x2F; 配置讀取yaml設定\n│   └── config.go &#x2F;&#x2F; 讀取yml設定\n├── middleware &#x2F;&#x2F; 中間件\n├── models &#x2F;&#x2F; 放置gorm的數據庫模型\n├── routers &#x2F;&#x2F; 路由邏輯\n│   ├── api\n│   │   └── v1\n│   │       ├── actives.go &#x2F;&#x2F; device_actives表的api\n│   │       └── states.go &#x2F;&#x2F; device_states表的api\n│   └── router.go &#x2F;&#x2F; 路由邏輯\n├── config.yml &#x2F;&#x2F; 設定檔\n└── server.go &#x2F;&#x2F; 入口<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"編寫API\"><a href=\"#編寫API\" class=\"headerlink\" title=\"編寫API\"></a>編寫API</h2><h3 id=\"actives-go\"><a href=\"#actives-go\" class=\"headerlink\" title=\"actives.go\"></a>actives.go</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">package v1\n\nimport (\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n\t&quot;github.com&#x2F;rs&#x2F;zerolog&#x2F;log&quot;\n)\n\n&#x2F;&#x2F; 獲取已排除、未排除or全部的設備狀態\nfunc GetActives(c *gin.Context) &#123;\n\tlog.Log().Msg(&quot;GetActives&quot;)\n&#125;\n\n&#x2F;&#x2F; 修改設備活躍狀態\nfunc EditActive(c *gin.Context) &#123;\n\tlog.Log().Msg(&quot;EditActive&quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>建立兩支針對device_actives表進行服務的API，我們下一節再進入GORM的編寫，因此先以log方式檢驗呼叫API是否符合預期</p>\n<h3 id=\"states-go\"><a href=\"#states-go\" class=\"headerlink\" title=\"states.go\"></a>states.go</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">package v1\n\nimport (\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n\t&quot;github.com&#x2F;rs&#x2F;zerolog&#x2F;log&quot;\n)\n\n&#x2F;&#x2F; 獲取「異常但未被排除」設備狀態\nfunc GetStates(c *gin.Context) &#123;\n\tlog.Log().Msg(&quot;GetStates&quot;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"路由註冊\"><a href=\"#路由註冊\" class=\"headerlink\" title=\"路由註冊\"></a>路由註冊</h2><h3 id=\"router-go\"><a href=\"#router-go\" class=\"headerlink\" title=\"router.go\"></a>router.go</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">package routers\n\nimport (\n\tv1 &quot;server&#x2F;routers&#x2F;v1&quot;\n\n\t&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n)\n\nfunc InitRouter() *gin.Engine &#123;\n\t&#x2F;&#x2F; 生成gin\n\tr :&#x3D; gin.Default()\n\n\tapi :&#x3D; r.Group(&quot;&#x2F;api&#x2F;v1&quot;)\n\t&#123;\n\t\t&#x2F;&#x2F; 獲取已排除、未排除or全部的設備狀態\n\t\tapi.GET(&quot;&#x2F;actives&#x2F;:active&quot;, v1.GetActives)\n\t\t&#x2F;&#x2F; 將設備狀態變換\n\t\tapi.PUT(&quot;&#x2F;actives&#x2F;:device_id&quot;, v1.EditActive)\n\t\t&#x2F;&#x2F; 獲取「異常但未被排除」設備狀態\n\t\tapi.GET(&quot;&#x2F;states&#x2F;:state&quot;, v1.GetStates)\n\t&#125;\n\n\treturn r\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"改寫啟動文件\"><a href=\"#改寫啟動文件\" class=\"headerlink\" title=\"改寫啟動文件\"></a>改寫啟動文件</h2><h3 id=\"server-go\"><a href=\"#server-go\" class=\"headerlink\" title=\"server.go\"></a>server.go</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">package main\n\nimport (\n\t&quot;github.com&#x2F;rs&#x2F;zerolog&#x2F;log&quot;\n\n\t&quot;server&#x2F;config&quot;\n\t&quot;server&#x2F;routers&quot;\n)\n\nfunc init() &#123;\n\t&#x2F;&#x2F; 調用zerolog結構化log輸出\n\tlog.Logger &#x3D; log.With().Caller().Logger()\n&#125;\n\nfunc main() &#123;\n\trouter :&#x3D; routers.InitRouter()\n\trouter.Run(&quot;:&quot; + config.Config.Server.Port)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"測試\"><a href=\"#測試\" class=\"headerlink\" title=\"測試\"></a>測試</h2><p>使用PostMan或其他API測試工具<br>GET訪問：<br><a href=\"http://localhost:3601/api/v1/actives/1\">http://localhost:3601/api/v1/actives/1</a><br><a href=\"http://localhost:3601/api/v1/states/1\">http://localhost:3601/api/v1/states/1</a><br>PUT訪問：<br><a href=\"http://localhost:3601/api/v1/actives/1\">http://localhost:3601/api/v1/actives/1</a><br>查看是否反饋正確的log</p>\n","feature":true,"text":"前言功能需求如下： 取得所有的已被排除在外的設備與基本訊息 根據device_id變換設備是否排除 取得所有的「異常但未被排除」設備 根據Restful的設計風格，我們應有以下三支API： GET(“/api/v1/actives/:active”) 獲取已排除、未排除or全部的...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"Golang","slug":"Golang","count":3,"path":"api/categories/Golang.json"}],"tags":[{"name":"Gin","slug":"Gin","count":2,"path":"api/tags/Gin.json"},{"name":"GORM","slug":"GORM","count":2,"path":"api/tags/GORM.json"},{"name":"PostgreSQL","slug":"PostgreSQL","count":2,"path":"api/tags/PostgreSQL.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E7%AF%80%E7%9B%AE%E6%A8%99\"><span class=\"toc-text\">本節目標</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%9B%AE%E9%8C%84%E7%B5%90%E6%A7%8B\"><span class=\"toc-text\">基本目錄結構</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B7%A8%E5%AF%ABAPI\"><span class=\"toc-text\">編寫API</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#actives-go\"><span class=\"toc-text\">actives.go</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#states-go\"><span class=\"toc-text\">states.go</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E8%A8%BB%E5%86%8A\"><span class=\"toc-text\">路由註冊</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#router-go\"><span class=\"toc-text\">router.go</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%94%B9%E5%AF%AB%E5%95%9F%E5%8B%95%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">改寫啟動文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#server-go\"><span class=\"toc-text\">server.go</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B8%AC%E8%A9%A6\"><span class=\"toc-text\">測試</span></a></li></ol>","author":{"name":"猴子工程師","slug":"blog-author","avatar":"https://i.imgur.com/5BVPyT3_d.webp","link":"/","description":"只要坑掉多了<br />猴子也能完成莎士比亞全集","socials":{"github":"https://github.com/Danny-CH4NG","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"Golang-Gin框架+GORM搭建APIServer(1)","uid":"bb9ea1063e87aa3740889487d9f40ff2","slug":"Golang-Gin框架-GORM搭建APIServer-1","date":"2021-10-17T07:01:36.000Z","updated":"2021-10-21T04:28:53.932Z","comments":true,"path":"api/articles/Golang-Gin框架-GORM搭建APIServer-1.json","keywords":null,"cover":null,"text":"前言 後端：Golang Gin框架 資料庫：PostgreSQL 這裡我們來做一個簡單的設備監控平台，初期階段有以下功能： 儲存設備的基本資料(id, 類型, 地址) 從資料庫中取得狀態異常的設備(id, 異常狀態代碼) 讓使用者可以排除特定設備，因此需要一個設備活躍狀態的資料...","link":"","photos":[],"count_time":{"symbolsCount":"6.3k","symbolsTime":"6 mins."},"categories":[{"name":"Golang","slug":"Golang","count":3,"path":"api/categories/Golang.json"}],"tags":[{"name":"Gin","slug":"Gin","count":2,"path":"api/tags/Gin.json"},{"name":"GORM","slug":"GORM","count":2,"path":"api/tags/GORM.json"},{"name":"PostgreSQL","slug":"PostgreSQL","count":2,"path":"api/tags/PostgreSQL.json"}],"author":{"name":"猴子工程師","slug":"blog-author","avatar":"https://i.imgur.com/5BVPyT3_d.webp","link":"/","description":"只要坑掉多了<br />猴子也能完成莎士比亞全集","socials":{"github":"https://github.com/Danny-CH4NG","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}